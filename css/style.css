*,
*::after,
*::before  {
    margin: 0;
    padding: 0;
    box-sizing: inherit;
}
/* inherit keyword specifies that a property should inherit its value from its parent element */

html {
    font-size: 62.5%;
}
/* root font size is set in html selector, this enables rem to be used throughout css */
/* use 10 as root size as now 1.6rem is easily calculated to 16px */
/* changed line 18 to %, this allows user settings to be used and we want 10px initial */
/* and browser default is 16px so 10/16= 62.5% */

body {
    font-family: "Lato", sans-serif;
    font-weight: 400;
    /* font-size: 16px; */
    line-height: 1.7;
    color: #777;
    padding: 3rem;
    box-sizing: border-box;
}
/* put these attributes in body because all children will inderit behavior of body */

.header {
    height: 95vh;
    background-image: linear-gradient(
        to right bottom,
        rgba(126, 213, 111, 0.80),
        rgba(40, 180, 133, 0.80)),
        url(../img/hero.jpg);
    background-size: cover;
    background-position: top;
    clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
    /* clip-path CSS property creates a clipping region that sets what part of an element should be shown.  */
    /* clip-path: polygon(x y, x y , x y, x y) */
    position: relative;
}
/* background picture has to be second definition as you want the gradient to have opacity and show thru */
/* background-size: cover; fit background in viewport */
/* background-position: top; crop bottom of image during resize, could also do bottom or center */
/* clip-path: polygon(0 0, x y, x y) */
/* http://bennettfeely.com/clippy/ */
/* vh works with viewport height while % works with size of parent element that % is in */
/* https://stackoverflow.com/questions/31039979/css-units-what-is-the-difference-between-vh-vw-and%E2%80%8B */
/* parent element for logo-box below so set position to relative */

.header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem;
}
/* absolute position from parent element, in this case .header, since .logo-box is absolute make .header relative */

.header__logo {
    height: 3.5rem;
    backface-visibility: hidden;
}

.header__logo:hover {
    animation: moveInRight 2s ease-out;
    animation-delay: 0.5s;
}

.header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    /* translation of -50% from x and -50% from y */
    text-align: center;
    /* background-color: red; */
}
/* without the transform the top left would reffer to the top left corner */

.heading-primary {
    color: #fff;
    text-transform: uppercase;
    backface-visibility: hidden;
    /* basically we are hiding the visibility of the back part of the element when we transform it */
    /* we are hiding back visibility because when we transform the element it's background shakes */
    /* backface-visibility is to fix text shake during end of animation */

    margin-bottom: 6rem;
}

.heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 2s;
    animation-timing-function: ease-out;
 /* animation-iteration-count: 3; */
    /* in animation-iteration-count animation happens to the specified numbers */
 /* animation-delay: 0.5s; */
}

.heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    animation: moveInRight 2s ease-out; /* short hand notation to above */
}

@keyframes moveInLeft {
/* Keyframes are the important frames which contain information of a start/end point of an action. */
    0% {
        opacity: 0;
        transform: translateX(-10rem);
        /* minus sign is used because we want our transformation to go on left side */
        /* translateX is taken because we wannt our transformation from left to right */
    }
    80% {
        transform: translateX(1rem);
        /* plus sign is used because we want our transformation to go on right side */
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}
/* for browser performance it's best to only animate opacity and transform */

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }
    80% {
        transform: translateX(-1rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(5rem);
    }
    100% {
        opacity: 1;
        transform: translate(0);
    }
}

.btn:link,
.btn:visited {
/* some pseudo classes like link, visited, hover are special state of a selector. so here link and visited are special state selector for button  */
/* link CSS pseudo-class represents an element that has not yet been visited */
    font-size: 1.6rem;
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 4rem;
    display: inline-block;
    border-radius: 10rem;
    transition: all .2s;
    /* here all the properties are enabled to be animated for 0.2 sec */
    position: relative;
}
/* inline-block will prevent element from spanning entire container */
/* choose a large number for border-radius, could have been 1000 and the effect would be the same */

.btn:hover {
    transform: translateY(-.3rem);
    box-shadow: 0 1rem 2rem rgba(0,0,0, 0.2);
}
/* negative is up in Y */
/* box shadow: x y blur color */

.btn:active {
    transform: translateY(-.1rem);
    box-shadow: 0 .5rem 1rem rgba(0,0,0, 0.2);
}

.btn--white {
    background-color: #fff;
    color: #777;
}

.btn::after {
/* ::after pseudo-element can be used to insert some content after the content of an element. */
    content: "";
    /* we always need to specify the content in order for the ::after pseudo-element to work. here we have specified empty string means there will be nothing added at the end of the content of the btn class  */
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 10rem;
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /* z-index defines the posotion of elements if they are one or top of another  */
    transition: all .4s;
}
/* first two properties are required for ::after pseudo-code to work */

.btn--white::after {
    background-color: #fff;
}

.btn:hover::after {
/* so if we are hovering over the element we want certain styles for the after psuedo element */
    transform: scaleX(1.4) scaleY(1.6);
    /* scale increases the size of the element */
    opacity: 0;
}

.btn--animated {
    animation: moveInBottom 2s ease-out 1s;
    animation-fill-mode: backwards;
}
/* last value is animation delay */
/* fill mode will allow initial keyframe property to display upon page refresh */
/* in this case it hides the button on initial page refresh */