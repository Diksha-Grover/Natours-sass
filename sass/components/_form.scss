.form {
  &__group:not(:last-child) {
    margin-bottom: 2rem;
  }

  &__input {
    font-size: 1.5rem;
    font-family: inherit;
    color: inherit;
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: rgba($color-white, 0.5);
    border: none;
    border-bottom: 3px solid transparent; // on focus border is created which shift second input
    // this line allows for that space to be occupied when not focused also
    width: 90%;
    display: block;
    transition: all 0.3s;

    @include respond(tab-port) {
      width: 100%;
    }

    &:focus {
      outline: none;
      box-shadow: 0 1rem 2rem rgba($color-black, 0.1);
      border-bottom: 3px solid $color-primary;
    }

    &:focus:invalid {
      // :invalid selector selects form elements with a value that does not validate according to the element's settings.
      border-bottom: 3px solid $color-secondary-dark;
    }

    &::-webkit-input-placeholder {
      // ::input-placeholder selector selects form elements with placeholder text, and let you style the placeholder text
      color: $color-gray-dark-2;
    }
  }

  &__label {
    font-size: 1.2rem;
    font-weight: 700;
    margin-left: 2rem; // align with input text which has this padding
    margin-top: 0.7rem;
    display: block; // can't use margin properties unless display is block
    transition: all 0.3s;
    transform: translateY(-9rem);
  }

  // the sibling we select always has to be after the main (first CSS selector, here its &__input)
  &__input:placeholder-shown + &__label {
    //adjacent sibling (+), can also use general sibling (~)
    // It is Adjacent sibling combinator. It combines two sequences of simple selectors having the same parent and the second one must come IMMEDIATELY after the first.
    // so __label is an adjacent sibling of __input
    // :placeholder-shown pseudo-class selects the input element itself when placeholder text exists in a form input
    // difference between :placeholder-shown and ::placeholder
    // :placeholder-shown is for selecting the input itself when itâ€™s placeholder text is being shown. As opposed to ::placeholder which styles the placeholder text
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem);
  }

  &__radio-group {
    width: 49%;
    display: inline-block;

    @include respond(tab-port) {
      width: 100%;
      margin-bottom: 2rem;
    }
  }

  &__radio-input {
    display: none;
  }

  &__radio-label {
    font-size: $default-font-size;
    cursor: pointer;
    position: relative;
    padding-left: 4rem;
  }

  &__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid $color-primary;
    border-radius: 50%;
    display: inline-block; //height and width only work on block elements
    position: absolute;
    left: 0;
    top: -0.4rem;

    &::after {
      content: ""; // required for ::after
      display: block; // required for ::after
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: $color-primary;
      opacity: 0;
      transition: all 0.3s;
    }
  }

  &__radio-input:checked ~ &__radio-label &__radio-button::after {
    // in this condition __radio-button is not the immediate class of __radio-input. So we used ~ for general sibling.
    // then through __radio-label class we reached __radio-button class
    // :checked selector matches every checked <input> element (only for radio buttons and checkboxes)
    opacity: 1;
  }
}
