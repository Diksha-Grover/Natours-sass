.navigation {
  &__checkbox {
    display: none;
  }

  &__button {
    // white circle for menu button
    height: 7rem;
    width: 7rem;
    border-radius: 50%;
    position: fixed;
    top: 6rem;
    right: 6rem;
    background-color: $color-white;
    z-index: 250;
    box-shadow: 0 1rem 3rem rgba($color-black, 0.1);
    text-align: center;
    cursor: pointer;

    @include respond(tab-port) {
      top: 4rem;
      right: 4rem;
    }

    @include respond(phone) {
      top: 3rem;
      right: 3rem;
    }
  }

  &__background {
    // green circle behind white circle above
    height: 6rem;
    width: 6rem;
    border-radius: 50%;
    position: fixed;
    top: 6.5rem;
    right: 6.5rem;
    background-image: radial-gradient(
      $color-primary-light,
      $color-primary-dark
    );
    // radial-gradient() function sets a radial gradient as the background image.
    // A radial gradient is defined by its center.
    z-index: 200;
    transition: transform 1.2s cubic-bezier(0.645, 0.045, 0.355, 1);
    // cubic-bezier() function defines a Cubic Bezier curve.
    // Cubic Bezier curve is defined by four points P0, P1, P2, and P3. P0 and P3 are the start and the end of the curve and, in CSS these points are fixed as the coordinates are ratios. P0 is (0, 0) and represents the initial time and the initial state, P3 is (1, 1) and represents the final time and the final state.

    @include respond(tab-port) {
      top: 4.5rem;
      right: 4.5rem;
    }

    @include respond(phone) {
      top: 3.5rem;
      right: 3.5rem;
    }
  }

  &__nav {
    height: 100vh;
    position: fixed;
    top: 0;
    left: -100%;
    z-index: 210;

    opacity: 0;
    width: 0; // to hide content
    transition: all 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }

  &__list {
    @include center_element; //mixin
    list-style: none;
  }

  &__item {
    margin: 1rem;
  }

  &__link {
    &:link,
    &:visited {
      display: inline-block; // required for padding and translateX
      font-size: 3rem;
      font-weight: 300;
      padding: 1rem 2rem;
      color: $color-white;
      text-decoration: none;
      text-transform: uppercase;
      background-image: linear-gradient(
        120deg,
        transparent 0%,
        transparent 50%,
        $color-white 50%
      );
      background-size: 220%;
      transition: all 0.5s;

      span {
        margin-right: 1rem;
        display: inline-block;
      }
    }

    &:hover,
    &:active {
      background-position: 100%; // 100% aligns last pixel of image with last pixel of container,
      // here y is not specified so it's set to 50% by default
      color: $color-primary;
      transform: translateX(1rem);
    }
  }

  // FUNCTIONALITY
  &__checkbox:checked ~ &__background {
    // It is general sibling combinator and similar to Adjacent sibling combinator. the difference is that the second selector does NOT have to immediately follow the first one means It will select all elements that is preceded by the former selector.
    transform: scale(80);
  }

  &__checkbox:checked ~ &__nav {
    opacity: 1;
    width: 100%;
    left: 0;
  }

  // ICON
  &__icon {
    position: relative;
    margin-top: 3.5rem;

    &,
    &::before,
    &::after {
      width: 3rem;
      height: 2px;
      background-color: $color-gray-dark-3;
      display: inline-block;
    }

    &::before,
    &::after {
      content: "";
      position: absolute;
      left: 0;
      transition: all 0.2s;
    }

    &::before {
      top: -0.8rem;
    }
    &::after {
      top: 0.8rem;
    }
  }

  &__button:hover &__icon::before {
    top: -1rem;
  }
  &__button:hover &__icon::after {
    top: 1rem;
  }

  &__checkbox:checked + &__button &__icon {
    // select sibling and then child
    background-color: transparent; // hide middle dash
  }

  &__checkbox:checked + &__button &__icon::before {
    top: 0; // put dash back to middle
    transform: rotate(135deg);
  }

  &__checkbox:checked + &__button &__icon::after {
    top: 0; // put dash back to middle
    transform: rotate(-135deg);
  }
}
